# Importing necessary libraries
import pandas as pd
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, roc_auc_score, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.multioutput import MultiOutputClassifier
from sklearn decomposition import PCA

# Train model
pca = PCA(n_components=780)  # Reduce to 1000 features
X_reduced = pca.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_reduced, y, test_size=0.2, stratify = y, random_state=42)


#Random Forest all drugs at the same time
smote = SMOTE(random_state=42)

for i in range(y_train.shape[1]):
    X_drug = X_train  # All feature data remains the same
    y_drug = y_train.iloc[:, i]  # Labels for the current drug
    X_resampled, y_resampled = smote.fit_resample(X_drug, y_drug)

for i in range(y_test.shape[1]):
    print(f"\nDrug {i+1}:")
    print(classification_report(y_test.iloc[:, i], y_pred[:, i]))
    y_true = y_test.iloc[:, i].values  # True labels for current drug
    y_proba = y_pred_proba[i, :, 1]  # Select probabilities for class 1 for the current drug
    print(f"y_true shape: {y_true.shape}")
    print(f"y_proba shape: {y_proba.shape}")
    print("Class distribution for drug", i+1, ":")
    print(pd.Series(y_true).value_counts())
## Plot the ROC curve
    fpr, tpr, _ = roc_curve(y_true, y_proba)
    roc_auc = auc(fpr, tpr)
    print(f"  AUC for drug {i+1} = {roc_auc:.2f}")
    plt.figure(figsize=(10, 8))
    plt.plot(fpr, tpr, label=f"Drug {i+1} (AUC = {roc_auc:.2f})")
    plt.plot([0, 1], [0, 1], 'k--')  # Diagonal line for random classifier
    plt.title(f"ROC Curve for Drug {i+1}")
    plt.xlabel("False Positive Rate")
    plt.ylabel("True Positive Rate")
    plt.legend(loc="lower right")
    plt.show()

#Random Forest all drugs seperately
##Creating dataframe for each drug seperately
df_Ciprofloxacin = df.drop(['Cefotaxime', 'Gentamicin', 'Ceftazidime'], axis = 1)
df_Cefotaxime = df.drop(['Ciprofloxacin', 'Gentamicin', 'Ceftazidime'], axis = 1)
df_Ceftazidime = df.drop(['Ciprofloxacin', 'Cefotaxime', 'Gentamicin'], axis = 1)
df_Gentamicin = df.drop(['Ciprofloxacin', 'Cefotaxime', 'Ceftazidime'], axis = 1)

##RF Ciprofloxacin
X = df_Ciprofloxacin.drop(['Ciprofloxacin','SampleID'], axis = 1)
y = df_Ciprofloxacin[['Ciprofloxacin']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify = y, random_state=42)
model_rf = RandomForestClassifier(n_estimators=100, random_state=42)
model_rf.fit(X_train, y_train)
y_pred = model_rf.predict(X_test)
print(classification_report(y_test, y_pred))
from sklearn.metrics import roc_curve, roc_auc_score
import matplotlib.pyplot as plt

### Predict probabilities for the positive class
y_pred_prob = model_rf.predict_proba(X_test)[:, 1]

### Compute ROC curve and AUC score
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob, pos_label=model_rf.classes_[1])
roc_auc = roc_auc_score(y_test, y_pred_prob)

### Plot the ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f"ROC Curve (AUC = {roc_auc:.2f})")
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label="Random Guess")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Receiver Operating Characteristic (ROC) Curve")
plt.legend(loc="lower right")
plt.grid(alpha=0.4)
plt.show()

##RF Cefotaxime
X = df_Cefotaxime.drop(['Ciprofloxacin','SampleID'], axis = 1)
y = df_Cefotaxime[['Cefotaxime']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify = y, random_state=42)
model_rf = RandomForestClassifier(n_estimators=100, random_state=42)
model_rf.fit(X_train, y_train)
y_pred = model_rf.predict(X_test)
print(classification_report(y_test, y_pred))
from sklearn.metrics import roc_curve, roc_auc_score
import matplotlib.pyplot as plt

### Predict probabilities for the positive class
y_pred_prob = model_rf.predict_proba(X_test)[:, 1]

### Compute ROC curve and AUC score
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob, pos_label=model_rf.classes_[1])
roc_auc = roc_auc_score(y_test, y_pred_prob)

### Plot the ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f"ROC Curve (AUC = {roc_auc:.2f})")
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label="Random Guess")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Receiver Operating Characteristic (ROC) Curve")
plt.legend(loc="lower right")
plt.grid(alpha=0.4)
plt.show()

##RF Ceftazidime
X = df_Ceftazidime.drop(['Ciprofloxacin','SampleID'], axis = 1)
y = df_Ceftazidime[['Ceftazidime']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify = y, random_state=42)
model_rf = RandomForestClassifier(n_estimators=100, random_state=42)
model_rf.fit(X_train, y_train)
y_pred = model_rf.predict(X_test)
print(classification_report(y_test, y_pred))
from sklearn.metrics import roc_curve, roc_auc_score
import matplotlib.pyplot as plt

### Predict probabilities for the positive class
y_pred_prob = model_rf.predict_proba(X_test)[:, 1]

### Compute ROC curve and AUC score
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob, pos_label=model_rf.classes_[1])
roc_auc = roc_auc_score(y_test, y_pred_prob)

### Plot the ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f"ROC Curve (AUC = {roc_auc:.2f})")
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label="Random Guess")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Receiver Operating Characteristic (ROC) Curve")
plt.legend(loc="lower right")
plt.grid(alpha=0.4)
plt.show()

##RF Gentamicin
X = df_Gentamicin.drop(['Ciprofloxacin','SampleID'], axis = 1)
y = df_Gentamicin[['Gentamicin']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify = y, random_state=42)
model_rf = RandomForestClassifier(n_estimators=100, random_state=42)
model_rf.fit(X_train, y_train)
y_pred = model_rf.predict(X_test)
print(classification_report(y_test, y_pred))
from sklearn.metrics import roc_curve, roc_auc_score
import matplotlib.pyplot as plt

### Predict probabilities for the positive class
y_pred_prob = model_rf.predict_proba(X_test)[:, 1]

### Compute ROC curve and AUC score
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob, pos_label=model_rf.classes_[1])
roc_auc = roc_auc_score(y_test, y_pred_prob)

### Plot the ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f"ROC Curve (AUC = {roc_auc:.2f})")
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label="Random Guess")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Receiver Operating Characteristic (ROC) Curve")
plt.legend(loc="lower right")
plt.grid(alpha=0.4)
plt.show()

#CNN for all drugs
X = df.drop(['Ciprofloxacin', 'Cefotaxime', 'Ceftazidime', 'Gentamicin', 'SampleID'], axis = 1)
y = df[['Ciprofloxacin', 'Cefotaxime', 'Ceftazidime', 'Gentamicin']]
from sklearn.decomposition import PCA
pca = PCA(n_components=780)  # Reduce to 780 features
X_reduced = pca.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_reduced, y, test_size=0.2, stratify = y, random_state=42)
y_train = y_train.replace({'S': 0, 'R': 1, 'Susceptible' : 0, 'Resistant' : 0, 'r' : 1, 's' : 0})
y_train = np.array(y_train, dtype=np.int32)
X_train = np.array(X_train, dtype=np.int32)
if len(y_train.shape) == 1:
    y_train = y_train.reshape(-1, 1)  # Single-output reshape
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout
model = Sequential()
model.add(Conv1D(64, kernel_size=3, activation='relu', input_shape=(780, 1)))
model.add(MaxPooling1D(pool_size=2))
model.add(Dropout(0.3))  # Regularization to avoid overfitting
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(4, activation='sigmoid'))  # For multi-label classification
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
from tensorflow.keras.callbacks import EarlyStopping
early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
history = model.fit(X_train, y_train,
                    validation_split=0.2,
                    epochs=100,
                    batch_size=32)
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy}")
